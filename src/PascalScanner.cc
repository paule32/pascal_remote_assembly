#define YY_CHAR char
#line 1 "E:\\msys64\\mingw64\\bin\\flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: c:\\Program\040Files\\Development\\CVS\040Repository/flex++/flexskel.cc,v 1.1.1.1 2002/04/13 06:01:32 Bear Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
//# i n c lude <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "pascal.ll"
#define INITIAL 0
#define YY_PascalScanner_FLEX_SCANNER
#define PAS_COMMENT 1
#define NEW_COMMENT 2
#define DEF_BLOCK 3
#define DEF_BLOCK_COMMENT 4
#define DEF_BLOCK_IFDEF 5
#define DEF_BLOCK_ELSE 6
#define DEF_BLOCK_CONDITION 7
#define DEF_BLOCK_CHECK_COMMENT 8
#define DOX 9
#define DOX_FILE 10
#define DOX_AUTHOR 11
#define DOX_BRIEF 12
#define DOX_BUG 13
#include "PascalScanner.h"
#line 77 "pascal.ll"
#line 196 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

#define yy___stderr YY_PascalScanner_ERRFILE
#define yy___text YY_PascalScanner_TEXT
#define yy___leng YY_PascalScanner_LENG
#define yy___in YY_PascalScanner_IN
#define yy___out YY_PascalScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PascalScanner_INIT_BUFFER( YY_PascalScanner_CURRENT_BUFFER, yy___in ); \
		YY_PascalScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PascalScanner_DEBUG != 0
#define yy___flex_debug YY_PascalScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PascalScanner_ECHO
#define yy___input YY_PascalScanner_INPUT
#define yy___fatal_error YY_PascalScanner_FATAL_ERROR
#define yy___wrap YY_PascalScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PascalScanner_IFILE  *yy_input_file;

    YY_PascalScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PascalScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PascalScanner_DEBUG != 0
int YY_PascalScanner_DEBUG_FLAG=YY_PascalScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PascalScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PascalScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PascalScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PascalScanner_CHAR *yy___text;
int yy___leng;

YY_PascalScanner_IFILE  *yy___in = (YY_PascalScanner_IFILE  *) 0;
YY_PascalScanner_OFILE *yy___out = (YY_PascalScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PascalScanner_CHAR *yy_c_buf_p = (YY_PascalScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PascalScanner_CHAR c, YY_PascalScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PascalScanner_ECHO_NOCODE
void YY_PascalScanner_CLASS::yy___echo()
{YY_PascalScanner_ECHO_CODE
}
#endif
#ifndef YY_PascalScanner_INPUT_NOCODE
int  YY_PascalScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PascalScanner_INPUT_CODE
}
#endif
#ifndef YY_PascalScanner_FATAL_ERROR_NOCODE
void YY_PascalScanner_CLASS::yy___fatal_error(char *msg)
{YY_PascalScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PascalScanner_WRAP_NOCODE
int  YY_PascalScanner_CLASS::yy___wrap()
{YY_PascalScanner_WRAP_CODE
}
#endif
void YY_PascalScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PascalScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PascalScanner_DEBUG != 0
 YY_PascalScanner_DEBUG_FLAG=YY_PascalScanner_DEBUG_INIT;
#endif
}

YY_PascalScanner_CLASS::YY_PascalScanner_CLASS(YY_PascalScanner_CONSTRUCTOR_PARAM) YY_PascalScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PascalScanner_CONSTRUCTOR_CODE;
}
YY_PascalScanner_CLASS::~YY_PascalScanner_CLASS() 
{YY_PascalScanner_DESTRUCTOR_CODE;
 if(YY_PascalScanner_CURRENT_BUFFER)
  YY_PascalScanner_DELETE_BUFFER(YY_PascalScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 84
typedef int yy_state_type;
static const short int yy_accept[242] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,   60,   63,   63,   66,   66,   84,   81,
        1,    2,    2,    3,   81,   81,   78,   79,   81,   16,
       77,   75,   74,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   46,   71,   73,   72,   49,   48,   47,   25,
       24,   25,   25,   25,   19,   45,   44,   43,   83,   28,
       83,   27,   40,   39,   40,   40,   40,   40,   40,   38,
       42,   41,   55,   83,   83,   83,   59,   57,   83,   60,
       62,   60,   63,   65,   63,   66,   68,   66,    0,   80,

       69,   17,   16,   76,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   18,   71,   70,    0,    0,
        0,    0,    0,   26,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,   37,    0,
        0,    0,   56,    0,    0,    0,   57,   58,   60,   60,
       63,   63,   66,   66,   50,   17,   15,   15,   15,   15,
        8,   15,   15,   15,   15,   14,    0,    0,    0,    0,
        0,   30,    0,   32,    0,   31,    0,   35,    0,   29,
        0,   34,    0,   33,    0,    0,    0,    0,   15,    5,
        6,   15,   15,   15,   15,   15,   15,    0,   21,    0,

        0,    0,    0,    0,    0,    4,    7,   15,   15,   15,
       15,   15,    0,   22,   23,    0,    0,   54,    0,   15,
       15,   15,   15,   13,    0,    0,    0,   51,   15,   10,
       15,   12,    0,    0,   53,    9,   15,   20,   52,   11,
        0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    1,    1,    7,    1,    1,    8,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   32,   33,   34,   35,   36,
       31,   37,   38,   39,   40,   41,   31,   31,   42,   31,
        1,   43,    1,    1,   31,    1,   44,   45,   24,   25,

       46,   47,   48,   49,   50,   31,   31,   51,   33,   34,
       52,   36,   31,   53,   38,   54,   55,   41,   31,   31,
       42,   31,   56,    4,   57,    1,    1
    } ;

static const YY_CHAR yy_meta[58] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        5,    1,    4,    4,    6,    4,    1,    1,    7,    8,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    4,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    1
    } ;

static const short int yy_base[272] =
    {   0,
        0,    0,   55,   56,   57,   58,   59,   61,   60,   62,
       65,   66,    0,    0,   74,  107,   71,   72,   85,  127,
      164,  221,   70,   92,   97,  130,  131,  132,  548,  549,
      549,  549,  549,  549,  539,  535,  549,  549,  531,  529,
      549,   79,  549,    0,   78,  110,  509,   81,  508,  100,
      101,   54,  534,    0,  549,  530,  549,  549,  549,  549,
      549,  125,  112,  130,  549,  549,  549,  549,  549,  549,
      534,  549,  549,  549,  173,  519,  175,  168,  142,  549,
      549,  549,  549,  179,  191,  105,  549,    0,  527,    0,
      549,  526,    0,  549,  525,    0,  549,  524,  525,  524,

      520,    0,  515,  549,    0,  161,  159,  175,  495,  503,
      493,  160,  176,  181,  198,  549,    0,  549,  189,  488,
      500,  499,  517,  516,  238,  499,  240,  185,  236,  512,
      242,  244,  509,  508,  505,  504,  501,  247,  248,  500,
      260,  163,  549,  447,   44,  451,    0,  549,    0,    0,
        0,    0,    0,    0,  549,    0,  187,  222,  217,  460,
        0,  473,  243,  248,  243,    0,  244,  249,  249,  254,
      489,  488,  480,  472,  464,  456,  453,  451,  447,  446,
      441,  440,  437,  436,  382,  383,  377,  283,  299,    0,
        0,  243,  244,  256,  259,  249,  298,  297,  549,  260,

      261,  281,  282,  320,  278,    0,    0,  260,  265,  295,
      270,  273,  277,  549,  549,  267,  271,  312,  311,  274,
      269,  272,  217,    0,  241,  162,  201,  155,  124,    0,
      276,    0,  151,  149,   97,    0,  289,   96,   73,    0,
      549,  335,  343,  351,  359,  367,  375,  383,  391,  399,
      407,  415,  423,   66,  431,  437,  441,  447,  451,  459,
      467,  475,  483,  489,  493,  497,  501,  505,  509,  513,
      517
    } ;

static const short int yy_def[272] =
    {   0,
      241,    1,  242,  242,  243,  243,  244,  244,  245,  245,
      246,  246,  246,  246,  247,  247,  248,  248,  246,  246,
      249,  249,  250,  250,  251,  251,  252,  252,  241,  241,
      241,  241,  241,  241,  253,  241,  241,  241,  241,  241,
      241,  241,  241,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  241,  255,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      256,  241,  241,  241,  241,  241,  257,  241,  258,  241,
      241,  241,  241,  241,  241,  241,  241,  259,  241,  260,
      241,  260,  261,  241,  261,  262,  241,  262,  253,  253,

      241,  263,  241,  241,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  241,  255,  241,  241,  241,
      241,  241,  256,  256,  241,  241,  257,  241,  258,  264,
      257,  257,  265,  266,  267,  268,  269,  258,  258,  270,
      241,  241,  241,  241,  241,  241,  259,  241,  260,  260,
      261,  261,  262,  262,  241,  263,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  241,  241,  241,  241,
      264,  264,  265,  265,  266,  266,  267,  267,  268,  268,
      269,  269,  270,  270,  241,  241,  241,  241,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  241,  241,  241,

      241,  241,  241,  241,  241,  254,  254,  254,  254,  254,
      254,  254,  241,  241,  241,  241,  241,  241,  241,  254,
      254,  254,  254,  254,  241,  241,  241,  241,  254,  254,
      254,  254,  271,  241,  241,  254,  254,  271,  241,  254,
        0,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241
    } ;

static const short int yy_nxt[607] =
    {   0,
       30,   31,   32,   33,   34,   30,   30,   35,   36,   30,
       30,   37,   38,   39,   40,   41,   42,   30,   43,   30,
       30,   44,   45,   46,   44,   47,   48,   44,   44,   49,
       44,   44,   44,   44,   44,   50,   44,   51,   44,   44,
       52,   44,   30,   44,   45,   47,   48,   44,   44,   49,
       44,   44,   44,   44,   44,   53,   30,   55,   55,   58,
       58,   61,   67,   61,   67,   56,   56,   70,   70,   71,
       71,  105,   91,   69,   69,  115,   74,  239,   75,   76,
       92,  104,  104,   62,   63,   62,   63,   83,   64,   84,
       64,   77,   78,   79,   91,   85,  186,  115,  187,   94,

      241,  235,   92,  106,   63,   86,   63,   95,   64,   74,
       64,   75,   76,   59,   59,   65,   68,   65,   68,  107,
      111,   72,   72,  106,   77,   78,   79,   82,   82,   83,
       80,   84,   94,   97,   97,  111,  113,   85,  108,  114,
       95,   98,   98,  120,  109,  121,  138,   86,  144,  145,
      119,  146,  113,  239,  114,  233,  122,  236,  108,  228,
      140,  109,  120,   80,   69,   69,   87,   69,   69,   69,
      119,   69,   69,   69,   89,   69,  122,  125,  126,  131,
       69,   69,   69,  141,   69,  135,  136,  137,  157,  141,
      127,  128,  129,  133,  134,  141,  159,  158,  163,  142,

      143,  141,  135,  136,  137,  235,  144,  145,  157,  146,
      164,  142,  158,  163,  234,  167,  189,  165,  159,   69,
       69,   69,   69,   87,   69,   69,   69,  164,   69,   69,
       69,   89,   69,  165,  166,  167,  189,   69,   69,   69,
      138,   69,  125,  126,  131,  233,  131,  190,  241,  232,
      166,  138,  241,  191,  140,  127,  128,  129,  133,  134,
      241,  241,  241,  241,  141,  241,  241,  190,  194,  191,
      141,  195,  197,  198,  199,  196,   69,   69,  200,  201,
      142,  207,  208,  209,  210,  211,  214,  215,  194,  220,
      221,  223,  197,  198,  199,  196,  207,  208,  200,  201,

      224,  211,  225,  209,  210,  230,  214,  215,  229,  220,
      221,  231,  237,  223,  240,  228,  218,  227,  226,  222,
      224,  230,  225,  219,  218,  229,  231,  217,  237,  216,
      213,  212,  206,  205,  240,   54,   54,   54,   54,   54,
       54,   54,   54,   57,   57,   57,   57,   57,   57,   57,
       57,   60,   60,   60,   60,   60,   60,   60,   60,   66,
       66,   66,   66,   66,   66,   66,   66,   69,   69,   69,
       69,   69,   69,   69,   69,   73,   73,   73,   73,   73,
       73,   73,   73,   81,   81,   81,   81,   81,   81,   81,
       81,   88,   88,   88,   88,   88,   88,   88,   88,   90,

       90,   90,   90,   90,   90,   90,   90,   93,   93,   93,
       93,   93,   93,   93,   93,   96,   96,   96,   96,   96,
       96,   96,   96,   99,  204,   99,   99,   99,   99,   99,
       99,  117,  203,  117,  117,  202,  117,  117,  117,  124,
      241,  183,  124,  132,  241,  181,  132,  132,  132,  139,
      241,  179,  139,  139,  147,  241,  147,  177,  147,  149,
      241,  149,  149,  149,  149,  149,  149,  151,  175,  151,
      151,  151,  151,  151,  151,  153,  241,  153,  153,  153,
      153,  153,  153,  156,  173,  156,  156,  156,  156,  156,
      156,  172,  241,  171,  172,  174,  193,  192,  174,  176,

      188,  185,  176,  178,  183,  181,  178,  180,  179,  177,
      180,  182,  175,  173,  182,  184,  171,  130,  184,  238,
      241,  123,  238,  170,  169,  168,  162,  161,  160,  103,
      155,  100,  100,  154,  152,  150,  148,  130,  123,  118,
      116,  112,  110,  103,  102,  101,  100,  241,   29,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241
    } ;

static const short int yy_chk[607] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        6,    7,    9,    8,   10,    3,    4,   11,   12,   11,
       12,  254,   23,   17,   18,   52,   15,  239,   15,   15,
       23,   42,   42,    7,    7,    8,    8,   19,    7,   19,
        8,   15,   15,   15,   24,   19,  145,   52,  145,   25,

      238,  235,   24,   45,    7,   19,    8,   25,    7,   16,
        8,   16,   16,    5,    6,    7,    9,    8,   10,   45,
       48,   11,   12,   45,   16,   16,   16,   17,   18,   20,
       15,   20,   26,   27,   28,   48,   50,   20,   46,   51,
       26,   27,   28,   63,   46,   63,   79,   20,   86,   86,
       62,   86,   50,  234,   51,  233,   64,  229,   46,  228,
       79,   46,   63,   16,   21,   21,   21,   21,   21,   21,
       62,   21,   21,   21,   21,   21,   64,   75,   75,   77,
       21,   21,   21,   84,   21,   78,   78,   78,  106,   84,
       75,   75,   75,   77,   77,   85,  108,  107,  112,   84,

       85,   85,  128,  128,  128,  227,  142,  142,  106,  142,
      113,   85,  107,  112,  226,  119,  157,  114,  108,   21,
       21,   22,   22,   22,   22,   22,   22,  113,   22,   22,
       22,   22,   22,  114,  115,  119,  157,   22,   22,   22,
      129,   22,  125,  125,  127,  225,  131,  158,  132,  223,
      115,  138,  139,  159,  129,  125,  125,  125,  127,  127,
      131,  131,  132,  132,  141,  138,  139,  158,  163,  159,
      141,  164,  165,  167,  168,  164,   22,   22,  169,  170,
      141,  192,  193,  194,  195,  196,  200,  201,  163,  208,
      209,  211,  165,  167,  168,  164,  192,  193,  169,  170,

      212,  196,  213,  194,  195,  221,  200,  201,  220,  208,
      209,  222,  231,  211,  237,  219,  218,  217,  216,  210,
      212,  221,  213,  205,  204,  220,  222,  203,  231,  202,
      198,  197,  189,  188,  237,  242,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,  243,  243,  243,  243,
      243,  244,  244,  244,  244,  244,  244,  244,  244,  245,
      245,  245,  245,  245,  245,  245,  245,  246,  246,  246,
      246,  246,  246,  246,  246,  247,  247,  247,  247,  247,
      247,  247,  247,  248,  248,  248,  248,  248,  248,  248,
      248,  249,  249,  249,  249,  249,  249,  249,  249,  250,

      250,  250,  250,  250,  250,  250,  250,  251,  251,  251,
      251,  251,  251,  251,  251,  252,  252,  252,  252,  252,
      252,  252,  252,  253,  187,  253,  253,  253,  253,  253,
      253,  255,  186,  255,  255,  185,  255,  255,  255,  256,
      184,  183,  256,  257,  182,  181,  257,  257,  257,  258,
      180,  179,  258,  258,  259,  178,  259,  177,  259,  260,
      176,  260,  260,  260,  260,  260,  260,  261,  175,  261,
      261,  261,  261,  261,  261,  262,  174,  262,  262,  262,
      262,  262,  262,  263,  173,  263,  263,  263,  263,  263,
      263,  264,  172,  171,  264,  265,  162,  160,  265,  266,

      146,  144,  266,  267,  140,  137,  267,  268,  136,  135,
      268,  269,  134,  133,  269,  270,  130,  126,  270,  271,
      124,  123,  271,  122,  121,  120,  111,  110,  109,  103,
      101,  100,   99,   98,   95,   92,   89,   76,   71,   56,
       53,   49,   47,   40,   39,   36,   35,   29,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PascalScanner_DEBUG != 0
static const short int yy_rule_linenum[83] =
    {   0,
       79,   80,   81,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   95,   96,   98,  100,  101,  102,
      106,  110,  114,  118,  119,  121,  125,  126,  128,  129,
      130,  131,  132,  133,  134,  136,  137,  139,  140,  141,
      146,  147,  152,  153,  154,  156,  157,  158,  159,  161,
      163,  164,  165,  166,  167,  168,  170,  171,  172,  174,
      175,  176,  178,  179,  180,  182,  183,  184,  186,  187,
      188,  189,  190,  192,  194,  195,  197,  198,  199,  201,
      207,  207
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "E:\\msys64\\mingw64\\bin\\flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PascalScanner_LEX_DEFINED
YY_PascalScanner_LEX_RETURN YY_PascalScanner_LEX ( YY_PascalScanner_LEX_PARAM )
YY_PascalScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PascalScanner_LEX_RETURN YY_PascalScanner_CLASS::YY_PascalScanner_LEX ( YY_PascalScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_PascalScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PascalScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PascalScanner_OFILE_DEFAULT;

	if ( YY_PascalScanner_CURRENT_BUFFER )
	    YY_PascalScanner_INIT_BUFFER( YY_PascalScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PascalScanner_CURRENT_BUFFER = YY_PascalScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PascalScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "E:\\msys64\\mingw64\\bin\\flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 242 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 241 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PascalScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PascalScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PascalScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PascalScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PascalScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PascalScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 79 "pascal.ll"
{ column += 8;             }
	YY_BREAK
case 2:
#line 80 "pascal.ll"
{ column  = 1; line++;     }
	YY_BREAK
case 3:
#line 81 "pascal.ll"
{ column += strlen(yytext);             }
	YY_BREAK
case 4:
#line 83 "pascal.ll"
{ column += 5; return PascalParser::TOK_BEGIN;      }
	YY_BREAK
case 5:
#line 84 "pascal.ll"
{ column += 4; return PascalParser::TOK_BYTE;       }
	YY_BREAK
case 6:
#line 85 "pascal.ll"
{ column += 4; return PascalParser::TOK_CHAR;       }
	YY_BREAK
case 7:
#line 86 "pascal.ll"
{ column += 5; return PascalParser::TOK_CONST;      }
	YY_BREAK
case 8:
#line 87 "pascal.ll"
{ column += 3; return PascalParser::TOK_END;        }
	YY_BREAK
case 9:
#line 88 "pascal.ll"
{ column += 8; return PascalParser::TOK_FUNCTION;   }
	YY_BREAK
case 10:
#line 89 "pascal.ll"
{ column += 7; return PascalParser::TOK_INTEGER;    }
	YY_BREAK
case 11:
#line 90 "pascal.ll"
{ column += 9; return PascalParser::TOK_PROCEDURE;  }
	YY_BREAK
case 12:
#line 91 "pascal.ll"
{ column += 7; return PascalParser::TOK_PROGRAM;    }
	YY_BREAK
case 13:
#line 92 "pascal.ll"
{ column += 6; return PascalParser::TOK_STRING;     }
	YY_BREAK
case 14:
#line 93 "pascal.ll"
{ column += 3; return PascalParser::TOK_VAR;        }
	YY_BREAK
case 15:
#line 95 "pascal.ll"
{ column += strlen(yytext); val->string_val = strdup( yytext ); return PascalParser::TOK_IDENTIFIER; }
	YY_BREAK
case 16:
#line 96 "pascal.ll"
{ column += strlen(yytext); val->int_val = atoi(yytext); return PascalParser::TOK_CONSTANT;   }
	YY_BREAK
case 17:
#line 98 "pascal.ll"
{ column += strlen(yytext); }
	YY_BREAK
case 18:
#line 100 "pascal.ll"
{ BEGIN(DEF_BLOCK); }
	YY_BREAK
case 19:
#line 101 "pascal.ll"
{ BEGIN(INITIAL);   }
	YY_BREAK
case 20:
#line 102 "pascal.ll"
{
    column += strlen(yytext);
    BEGIN(DEF_BLOCK_COMMENT);
}
	YY_BREAK
case 21:
#line 106 "pascal.ll"
{
    column += strlen(yytext);
    BEGIN(DEF_BLOCK_COMMENT);
}
	YY_BREAK
case 22:
#line 110 "pascal.ll"
{
    column += strlen(yytext);
    BEGIN(DEF_BLOCK_COMMENT);
}
	YY_BREAK
case 23:
#line 114 "pascal.ll"
{
    column += strlen(yytext);
    BEGIN(DEF_BLOCK_IFDEF);
}
	YY_BREAK
case 24:
#line 118 "pascal.ll"
{ column = 1; line += 1; }
	YY_BREAK
case 25:
#line 119 "pascal.ll"
{ }
	YY_BREAK
case 26:
#line 121 "pascal.ll"
{
    column += strlen(yytext);
    BEGIN(DEF_BLOCK_CONDITION);
}
	YY_BREAK
case 27:
#line 125 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 28:
#line 126 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 29:
#line 128 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 30:
#line 129 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 31:
#line 130 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 32:
#line 131 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 33:
#line 132 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 34:
#line 133 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 35:
#line 134 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 36:
#line 136 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 37:
#line 137 "pascal.ll"
{ column += strlen(yytext); BEGIN(DEF_BLOCK_CHECK_COMMENT); }
	YY_BREAK
case 38:
#line 139 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 39:
#line 140 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 40:
#line 141 "pascal.ll"
{
    std::cout << _("not a valid pre-processor command.") << std::endl;
    yyterminate();
}
	YY_BREAK
case 41:
#line 146 "pascal.ll"
{ BEGIN(INITIAL);  }
	YY_BREAK
case 42:
#line 147 "pascal.ll"
{
    std::cout << _("not a valid pre-processor command.") << std::endl;
    yyterminate();
}
	YY_BREAK
case 43:
#line 152 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 44:
#line 153 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 45:
#line 154 "pascal.ll"
{ }
	YY_BREAK
case 46:
#line 156 "pascal.ll"
{ BEGIN(NEW_COMMENT);       }
	YY_BREAK
case 47:
#line 157 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 48:
#line 158 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 49:
#line 159 "pascal.ll"
{ }
	YY_BREAK
case 50:
#line 161 "pascal.ll"
{ BEGIN(DOX); }
	YY_BREAK
case 51:
#line 163 "pascal.ll"
{ BEGIN(DOX_FILE);    }
	YY_BREAK
case 52:
#line 164 "pascal.ll"
{ BEGIN(DOX_AUTHOR);  }
	YY_BREAK
case 53:
#line 165 "pascal.ll"
{ BEGIN(DOX_BRIEF);   }
	YY_BREAK
case 54:
#line 166 "pascal.ll"
{ BEGIN(DOX_BUG);     }
	YY_BREAK
case 55:
#line 167 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 56:
#line 168 "pascal.ll"
{ std::cout << "ende" << std::endl; BEGIN(INITIAL);           }
	YY_BREAK
case 57:
#line 170 "pascal.ll"
{ std::cout << "file  : " << yytext << std::endl; }
	YY_BREAK
case 58:
#line 171 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 59:
#line 172 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 60:
#line 174 "pascal.ll"
{ std::cout << "author: " << yytext << std::endl; }
	YY_BREAK
case 61:
#line 175 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 62:
#line 176 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 63:
#line 178 "pascal.ll"
{ std::cout << "brief : " << yytext << std::endl; }
	YY_BREAK
case 64:
#line 179 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 65:
#line 180 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 66:
#line 182 "pascal.ll"
{ std::cout << "bug   : " << yytext << std::endl; }
	YY_BREAK
case 67:
#line 183 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 68:
#line 184 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 69:
#line 186 "pascal.ll"
{ BEGIN(PAS_COMMENT);       }
	YY_BREAK
case 70:
#line 187 "pascal.ll"
{ BEGIN(INITIAL);           }
	YY_BREAK
case 71:
#line 188 "pascal.ll"
{ }
	YY_BREAK
case 72:
#line 189 "pascal.ll"
{ column += 1;              }
	YY_BREAK
case 73:
#line 190 "pascal.ll"
{ column  = 1; line += 1;   }
	YY_BREAK
case 74:
#line 192 "pascal.ll"
{ column += 1; return PascalParser::SYM_EQUAL;      }
	YY_BREAK
case 75:
#line 194 "pascal.ll"
{ column += 1;         return PascalParser::SYM_SEMICOLON;  }
	YY_BREAK
case 76:
#line 195 "pascal.ll"
{ column  = 1; line++; return PascalParser::SYM_SEMICOLON;  }
	YY_BREAK
case 77:
#line 197 "pascal.ll"
{ column += 1; return PascalParser::SYM_COLON;      }
	YY_BREAK
case 78:
#line 198 "pascal.ll"
{ column += 1; return PascalParser::SYM_COMMA;      }
	YY_BREAK
case 79:
#line 199 "pascal.ll"
{ column += 1; return PascalParser::SYM_DOT;        }
	YY_BREAK
case 80:
#line 201 "pascal.ll"
{
    column += strlen(yytext);
    val->string_val = strdup( yytext );
    return PascalParser::TOK_STRINGEXPR;
}
	YY_BREAK
case 81:
#line 207 "pascal.ll"
{ column += 1;
    std::stringstream ss;
    ss << _("Invalide character: ") << yytext[0];
    val->string_val = strdup( ss.str().c_str() );
    
    return PascalParser::UNKNOWN;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PAS_COMMENT):
case YY_STATE_EOF(NEW_COMMENT):
case YY_STATE_EOF(DEF_BLOCK):
case YY_STATE_EOF(DEF_BLOCK_COMMENT):
case YY_STATE_EOF(DEF_BLOCK_IFDEF):
case YY_STATE_EOF(DEF_BLOCK_ELSE):
case YY_STATE_EOF(DEF_BLOCK_CONDITION):
case YY_STATE_EOF(DEF_BLOCK_CHECK_COMMENT):
case YY_STATE_EOF(DOX):
case YY_STATE_EOF(DOX_FILE):
case YY_STATE_EOF(DOX_AUTHOR):
case YY_STATE_EOF(DOX_BRIEF):
case YY_STATE_EOF(DOX_BUG):
#line 215 "pascal.ll"
{ yyterminate(); }
	YY_BREAK
case 83:
#line 216 "pascal.ll"
ECHO;
	YY_BREAK
#line 493 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "E:\\msys64\\mingw64\\bin\\flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PascalScanner_DEBUG != 0
#ifndef YY_PascalScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PascalScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_PascalScanner_CHAR *dest = YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_PascalScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PascalScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PascalScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PascalScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PascalScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PascalScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_PascalScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 242 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "E:\\msys64\\mingw64\\bin\\flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_PascalScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 242 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 241);
#line 755 "E:\\msys64\\mingw64\\bin\\flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PascalScanner_CHAR c, register YY_PascalScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PascalScanner_CHAR c;
register YY_PascalScanner_CHAR *yy_bp;
#endif
#else
void YY_PascalScanner_CLASS::yyunput( YY_PascalScanner_CHAR c, YY_PascalScanner_CHAR *yy_bp )
#endif

    {
    register YY_PascalScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_PascalScanner_CHAR *dest =
	    &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[YY_PascalScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_PascalScanner_CHAR *source =
	    &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PascalScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PascalScanner_CLASS::input()
#endif
    {
    int c;
    YY_PascalScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PascalScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PascalScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PascalScanner_RESTART( YY_PascalScanner_IFILE  *input_file )
#else
void YY_PascalScanner_RESTART( input_file )
YY_PascalScanner_IFILE  *input_file;
#endif
#else
void YY_PascalScanner_CLASS::YY_PascalScanner_RESTART ( YY_PascalScanner_IFILE  *input_file )
#endif

    {
    YY_PascalScanner_INIT_BUFFER( YY_PascalScanner_CURRENT_BUFFER, input_file );
    YY_PascalScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PascalScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PascalScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PascalScanner_CLASS::YY_PascalScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PascalScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PascalScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PascalScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PascalScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PascalScanner_CURRENT_BUFFER = new_buffer;
    YY_PascalScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PascalScanner_LOAD_BUFFER_STATE( void )
#else
void YY_PascalScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PascalScanner_CLASS::YY_PascalScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PascalScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PascalScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PascalScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PascalScanner_CREATE_BUFFER( YY_PascalScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PascalScanner_CREATE_BUFFER( file, size )
YY_PascalScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PascalScanner_CLASS::YY_PascalScanner_CREATE_BUFFER( YY_PascalScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PascalScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PascalScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PascalScanner_CREATE_BUFFER()" );

    YY_PascalScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PascalScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PascalScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PascalScanner_CLASS::YY_PascalScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PascalScanner_CURRENT_BUFFER )
	YY_PascalScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PascalScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PascalScanner_IFILE  *file )
#else
void YY_PascalScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PascalScanner_IFILE  *file;
#endif
#else
void YY_PascalScanner_CLASS::YY_PascalScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PascalScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 216 "pascal.ll"

